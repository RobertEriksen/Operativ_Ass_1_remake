#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX 2000

int fd[2];

char* readInput(){
    printf("Enter your input here: \n");
    char *buf = malloc(sizeof(char)*2000);
    return fgets(buf, MAX, stdin);
}

void writeToFile(char *copyString, char cwd[]){
    char *token = strtok(copyString, "|");
    FILE *fptr = fopen(cwd, "a");
    while(token != NULL){
        fprintf(fptr,"%s\n",token);
        token = strtok(NULL, "|");
    }
    fclose(fptr);
}

int getSizeOfFile(char cwd[]){
    int counter = 0;
    char line[2048];
    FILE* file = fopen(cwd, "r");

    while (fgets(line, sizeof(line), file)) {
        counter++;
    }
    fclose(file);
    return counter-1;
}

int checkEmpty(char line[]){
    if(line[0] == '\n'){
        return 1;
    }
    return 0;
}

void executeFirst(char line[], int sizeofFile){
    char *argv[] = { "sh", "-c", line, 0 }; //Initialize arguments for exec
    int pid;

    pid = fork();//Fork into parent/Child
    if (pid> 0 ) {//Parent
        pid = wait(NULL);//Parent does nothing but waiting for child to finish and return to the while loop
    }
    else {//Child
        if(sizeofFile==2){dup2(fd[1], STDOUT_FILENO);}
        execvp(argv[0], argv);
    }
}

void executeUneven(char line[]){
    char *argv[] = { "sh", "-c", line, 0 }; //Initialize arguments for exec
    int pid;
    pid = fork();//Fork into parent/Child
    if (pid> 0 ) {//Parent
        close(fd[0]);
        close(fd[1]);

        pid = wait(NULL);//Parent does nothing but waiting for child to finish and return to the while loop
    }
    else {//Child
        close(fd[1]);
        dup2(fd[0], STDIN_FILENO);
        execvp(argv[0], argv);
    }
}

void executeEven(char line[]){
    char *argv[] = { "sh", "-c", line, 0 }; //Initialize arguments for exec
    int pid;
    pid = fork();//Fork into parent/Child
    if (pid> 0 ) {//Parent
        pid = wait(NULL);//Parent does nothing but waiting for child to finish and return to the while loop
    }
    else {//Child
        execvp(argv[0], argv);
    }
}

void Execute(char cwd[], int sizeofFile){
    FILE* file = fopen(cwd, "r");
    char line[2048];
    int counter = 0;
    while (fgets(line, sizeof(line), file)) {
        if(!checkEmpty(line)){
            if(counter==0){
                executeFirst(line, sizeofFile);
            }
            else if(counter%2==1){
                executeUneven(line);
            }
            else if(counter%2==0){
                //executeEven(line);
                printf("More than one pipe not implemented\n");
                break;
            }
            counter++;
        }
    }
    fclose(file);
}

int main() {
    pipe(fd);
    char cwd[200];
    getcwd(cwd, sizeof(cwd));
    strcat(cwd,"/text.txt");

    char *copyString = malloc(sizeof(char)*2000);
    while(1){
        strcpy(copyString, readInput());
        if(strcmp(copyString, "exit\n") == 0){
            break;
        }
        fclose(fopen(cwd, "w"));
        writeToFile(copyString, cwd);
        int sizeofFile = getSizeOfFile(cwd);
        Execute(cwd,sizeofFile);
    }
    return 0;
}
